import tkinter as tk
import _random
import pygame as pg
from matrix_rotation import rotate_array as ra


class Tetris:
    def _init_(self, parent):
       parent.title('Tetris')
       self.parent= parent
       self.board_width = 10
       self.board_height = 24
       self.board = [['' for column in range(self.board_width)] 
                         for row in range(self.board_height)]
       self.width = 400
       self.height = 800
       self.square_width = self.width//10
       self.canvas = tk.Canvas(root, height=self.height, width=self.width)
       self.canvas.grid(row = 0, column = 0)
       self.separator = seft.canvas.create_line(0,
                                                self.height//6,
                                                self.width, 
                                                self.height//6,
                                                width = 2)

       self.tickrate = 1000
       self.piece_is_active = False
       self.parent.after(self.tickrate, self.tick)
       self.shapes = {'s':[['*', ''],
                           ['*', '*'],
                           ['', '*']],
                      'z':[['', '*'],
                           ['*', '*']
                           ['*', '']],
                      'r':[['*', '*'],
                           ['*', ''],
                           ['*', '']],
                      'L':[['*', ''],
                           ['*', ''],
                           ['*', '*']],
                      'o':[['*', '*'],
                           ['*', '*']],
                      'I':[['*'],
                           ['*'],
                           ['*'],
                           ['*']],
                      'T':[['*', '*', '*'],
                           ['', '*', '']]
                      }
       self.parent.bind('<Down>', self.shift)
       self.parent.bind('<Left>', self.shift)
       self.parent.bind('<Right>', self.shift)
       self.parent.bind('<Up>', self.shift)
       self.parent.bind('<w>', self.shift)
       self.parent.bind('<W>', self.shift)
       self.parent.bind('a', self.shift)
       self.parent.bind('A', self.shift)
       self.parent.bind('s', self.shift)
       self.parent.bind('S', self.shift)
       self.parent.bind('d', self.shift)
       self.parent.bind('D', self.shift)
       self.parent.bind('q', self.shift)
       self.parent.bind('Q', self.shift)
       self.parent.bind('e', self.shift)
       self.parent.bind('E', self.shift)
       self.parent.bind('0', self.rotate)

    def rotate(self, event=None):
        if not self.active_piece:
            return
        r = self.active_piece['row']
        c = self.active_piece['column']
        l = len(self.active_piece['shape'])
        w = len(self.active_piece['shape'][0])
        x = c + w//2
        y = r +l//2
        direction = event.keysym
        if direction in {'q', 'Q'}:
            direction = 'left'
            shape = ra(self.active_piece['shape'], -90)
        elif direction in {'e', 'E', '0', 'Up', 'w', 'W'}:
            direction = 'right'
            shape = ra(self.active_piece['shape'], 90)
        
        l = len(shape)
        w = len(shape[0])
        rt = y - l//2
        ct = x - w//2
        x_correction, y_correction = self.active_piece[
                                    'rotation'][self.active_piece[
                                        'rotation_index']]
        rt += y_correction
        ct += x_correction

        for squares, row in zip(range(r, r+1),
                                self.active_piece['shape']):
            for column, square in zip(range(ct, ct+w), squares):
                if square and self.board[row][column] == 'x':
                    print(row, column, squares, self.board[row][column])
                    if direction == down:
                        self.settle()
                    return

        self.active_piece['shape'] = shape
        self.active_piece['rotation']['rotation_index'] = (
                                                            (self.active_piece['rotation']['rotation_index']
                                                             +
                                                             1)
                                                             %
                                                             lem(self.active_piece['rotation'])
                                                             )
        

        x_start = min(coord 
                      for tup in self.active_piece['coords']
                      for coord in (tup[0], tup[2]))
        y_start = min(coord 
                      for tup in self.active_piece['coords'] 
                      for coord in (tup[1], tup[3]))
        squares = iter(range(4))
        #squares = iter(self.active_piece['piece'])
        for row_coord, row in zip(range(y_strart, 
                                        y_start+1*self.square_width+1,
                                        self.square_width),
                                  shape):
            for col_coord, cell in zip(range(x_start, 
                                             x_start+w*self.square_width+1,
                                             self.square_width),
                                       row):
                if cell:
                    square_idx = next(squares)
                    coord = (col_coord,
                            row_coord,
                            col_coord+self.square_width,
                            row_coord+self.square_width)
                    self.active_piece['coord'][square_idx] = coord
                    self.canvas.coords(self.active_piece['piece'][square_idx], 
                                                       coord)
                                                       
        for row in shape:
             print(*(cell or '' for cell in row))

    def tick(self):
        if self.piece_is_active:
            self.spawn()
            #self.piece_is_active = not self.piece_is_active

        #self.parent.after(self.tickrate, self.tick)

    def shift(self, event=None):
        down = {'Down', 's', 'S'}
        left = {'Left', 'a', 'A'}
        right = {'Right', 'd', 'D'}
        if not self.piece_is_active:
            return
        r = self.active_piece['row']
        c = self.active_piece['column']
        l = len(self.active_piece['shape'])
        w = len(self.active_piece['shape'][0])
        direction = (event and event.keysym) or 'Down'
        if direction in down: 
            if r+1 >= self.board_height:
                self.settle()
                return
            rt = r+1
            ct = c
        elif direction in left:
            if not c:
                return
            rt = r
            ct = c-1
        elif direction in right:
            if c+w >= self.board_width:
                return
            rt = r
            ct = c+1
       
        for squares, row in zip(range(r, r+1),
                                self.active_piece['shape']):
            for column, square in zip(range(ct, ct+w), squares):
                if square and self.board[row][column] == 'x':
                    print(row, column, squares, self.board[row][column])
                    if direction == down:
                        self.settle()
                    return
        for row in self.board:
            row[:] = ['' if cell=='*' else cell for cell in row]        
        if direction == 'Down':
            #self.board[r][c:c+w] = ['' if p else b for b, p in zip(self.board[r][c:c+w],
                                                     #self.active_piece['piece'][0])]
            self.active_piece['row'] += 1
            r += 1
        elif derection == 'Left':
                #offset = c+w
            self.active_piece['column'] -= 1
            c -= 1
        elif direction == 'Right':
               # offset = c-1
            self.active_piece['column'] += 1
            c += 1
            #if 0 <= column < self.board_width: 
                #for row, idx in enumerate(range(r, r+1)):
                   # self.board[idx][column] = ''
        for row, squares in zip(range(r, r+1),
                                self.active_piece['shape']
                                ):
            for column, square in zip(range(c, c+w), squares):
                if squares:
                        self.board[row][column] = squares
        for id, coord_idx in zip(self.active_piece['piece'], range(len(self.active_piece['coords']))):
            x1, y1, x2, y2 = self.active_piece['coords'][coords_idx]
            if direction == 'Down':
                 y1 += self.square_width
                 y2 += self.square_width
            elif direction == 'Left':
                 x1 -= self.square_width
                 x2 -= self.square_width
            elif direction == 'Right':
                 x1 += self.square_width
                 x2 += self.square_width
            self.active_piece['coords'][coord_idx] = x2, y1, x2, y2
            self.canvas.coords(id, self.active_piece['coords'][coords_idx])


    def rotate(self, diraction):
        pass

    def settle(self):
        pass
        self.piece_is_active = False
        #for row in self.board:
        print('clock')
        for row in self.board:
            row[:] = ['x' if cell=='*' else cell for cell in row]
            print(row)
        self.parent.after(self.tickrate, self.spawn())

    def spawn(self):
        self.piece_is_active = True
        shape = self.shapes[random.choice('szrLoIT')]
        shape = ra(piece, random.choice((0, 90, 100, 270)))
        width = len(shape[0])
        start = (10-width)//2
        self.active_piece = {'shape':shape, 'piece':[], 'row' :0, 'column':start,'coords':[]}
        for y, row in enumerate(shape):
            self.board[y][start:start+width] = shape[y]
            for x, cell in enumerate(row, start=start):
                 if cell:
                     self.active_piece['coords'].appand((self.square_width*x,
                                                  self.square_width*y,
                                                  self.square_width*(x+1),
                                                  self.square_width*(y+1)))
                     self.active_piece['piece'].append(
                     self.canvas.create_rectangle(self.active_piece['coords'][-1]))

        self.active_piece['rotation_index'] = 0
        if len(shape) == len(shape[0]):
            self.active_piece['rotation'] = [(0,0)]
        else:
            self.active_piece['rotation'] = [(0,0),
                                             (1,0),
                                             (-1,1),
                                             (0, -1)]
        if len(shape) < len(shape[0]):
            self.active_piece['rotation_index'] += 1

        for row in self.board:
           print(*(cell or ' ' for cell in row))

    def new(seft):
        pass

    def lose(self):
       self.piece_is_active = False
       if self.audio['f']:
            self.sounds['lose.ogg'].play()
       self.parent.after_cancel(self.ticking)
       self.parent.after_cancel(self.spawning)
       self.clear_iter(range(len(self.board)))

    def clear(self, indices):
        if self.audio['f']:
            self.sounds['clear.ogg'].play()
        for idx in indices:
            self.board.pop(idx)
            self.board.insert(0, ['' for column in range(self.board_width)])
        self.clear_iter(indices)


root = tk.Tk()
tetris = Tetris(root)
root.mainloop()
