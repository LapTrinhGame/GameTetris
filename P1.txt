import tkinter as tk
import _random
import pygame as pg
from matrix_rotation import rotate_array as ra

class Shape:
    def _init_(self, shape, piece):

class Tetris:
    def _init_(self, parent):
       self.parent= parent
       self.width = 400
       self.height = 800
       self.square_width = self.width//10
       self.canvas = tk.Canvas(root, height=self.height, width=self.width)
       self.canvas.grid(row = 0, column = 0)
       self.separator = seft.canvas.create_line(0,
                                                self.height//6,
                                                self.width, 
                                                self.height//6,
                                                width = 2)

       self.tickrate = 1000
       self.piece_is_active = False
       self.parent.after(self.tickrate, self.tick)
       self.shapes = {'s':[['*', ''],
                           ['*', '*'],
                           ['', '*']],
                      'z':[['', '*'],
                           ['*', '*']
                           ['*', '']],
                      'r':[['*', '*'],
                           ['*', ''],
                           ['*', '']],
                      'L':[['*', ''],
                           ['*', ''],
                           ['*', '*']],
                      'o':[['*', '*'],
                           ['*', '*']],
                      'I':[['*'],
                           ['*'],
                           ['*'],
                           ['*']],
                      'T':[['*', '*', '*'],
                           ['', '*', '']]
                      }


    def tick(self):
        if self.piece_is_active:
            self.spawn()

        self.parent.after(self.tickrate, self.tick)

    def down(self):
        pass

    def shift(self, direction):
        pass

    def rotate(self, diraction):
        pass

    def settle(self):
        pass
        self.piece_is_active = not self.piece_is_active

    def spawn(self):
        shape = self.shapes[_random.choice('szrLoIT')]
        shape = ra(piece, _random.choice((0, 90, 100, 270)))
        width = len(piece[0])
        start = (10-width)//2
        self.active_piece = [shape, []]
        for y, row in enumerate(shape):
             for x, column in enumerate(piece, start= start):
                 if column:
                     self.active_piece[1].appent(
                         self.canvas.create_rectangle(self.square_width*x,
                                                      self.square_width*y,
                                                      (self.square_width+1)*x,
                                                      (self.square_width+1)*y))


    def new(seft):
        pass

    def lose(self):
        pass

    def clear(self):
        pass


root = tk.Tk()
tetris = Tetris(root)
root.mainloop()
